create or replace function add_new_user(user_id_ integer, is_admin_ boolean) returns void as $$
begin
	if not exists (SELECT user_id from all_users where user_id = user_id_) then
		INSERT INTO all_users VALUES ( user_id_, is_admin_ );
	end if;
end;
$$ language plpgsql;



create or replace function is_user_admin(user_id_ integer) returns boolean as $$
begin
	return is_admin from all_users where user_id = user_id_;
end;
$$ language plpgsql;



create or replace function add_new_client(client_id_ integer, client_name_ char, client_email_ char) returns void as $$
begin
	if not exists (SELECT client_id from client where client_id = client_id_) then
		INSERT INTO client VALUES ( client_id_, client_name_, client_email_ );
	end if;
end;
$$ language plpgsql;



create or replace function add_new_item(item_name_ char, item_space_ integer, owner_ integer) returns void as $$
begin
	INSERT INTO items(item_name, item_space, owner)
	VALUES ( item_name_, item_space_, owner_ );
end;
$$ language plpgsql;



create or replace function add_new_sklad(owner_id_ integer, free_space_ integer, total_space_ integer, price_for_one_month integer) returns void as $$
begin
	INSERT INTO skladi(owner_id, free_space, total_space, price_for_one_month)
	VALUES ( owner_id_, free_space_, total_space_, price_for_one_month );
end;
$$ language plpgsql;



create or replace function add_new_owner(owner_id_ integer, owner_name_ char, owner_email_ char) returns void as $$
begin
	if not exists (SELECT * from sklad_owner where owner_id = owner_id_) then
		INSERT INTO sklad_owner VALUES ( owner_id_, owner_name_, owner_email_ );
	end if;
end;
$$ language plpgsql;



create or replace function add_new_contract(sklad_id_ integer, client_id_ integer, rent_duration_ integer) returns void as $$
begin
	INSERT INTO contracts(sklad_id, client_id, rent_duration)
	VALUES ( sklad_id_, client_id_, rent_duration_ );
end;
$$ language plpgsql;


create or replace function general_item_space(client_id_ integer) returns integer as $$
begin
	return SUM(item_space) FROM items WHERE owner = client_id_;
end;
$$ language plpgsql;



create or replace function available_sklads(client_id integer) returns setof skladi as $$
declare
	item_space_sum int;
begin
	item_space_sum = (select general_item_space(client_id));
	return query select * FROM skladi WHERE skladi.free_space >= item_space_sum;
end;
$$ language plpgsql;



create or replace function info_about_items(client_id_ integer) 
returns setof items as $$
begin
	return query SELECT * FROM items WHERE owner = client_id_;
end;
$$ language plpgsql;



create or replace function info_about_owner_sklads(owner_id_ integer) 
returns setof skladi as $$
begin
	return query SELECT * FROM skladi WHERE owner_id = owner_id_;
end;
$$ language plpgsql;



create or replace function info_about_client_contracts(client_id_ integer) 
returns setof contracts as $$
begin
	return query SELECT * FROM contracts WHERE client_id = client_id_;
end;
$$ language plpgsql;



create or replace function info_about_owner_contracts(owner_id_ integer)
returns setof contracts as $$
begin
	return query SELECT contract_id, contracts.sklad_id, client_id, rent_duration, total_price
	FROM contracts, skladi WHERE contracts.sklad_id = skladi.sklad_id AND owner_id = owner_id_;
end;
$$ language plpgsql;



create or replace function del_sklad(sklad_id_ integer) returns void as $$
begin
	delete from skladi where sklad_id = sklad_id_;
end;
$$ language plpgsql; 


create or replace function reset_skladi_inc() returns void as $$
begin
	alter sequence skladi_inc restart;
end;
$$ language plpgsql;


create or replace function reset_contracts_inc() returns void as $$
begin
	alter sequence contracts_inc restart;
end;
$$ language plpgsql;


create or replace function reset_item_inc() returns void as $$
begin
	alter sequence item_inc restart;
end;
$$ language plpgsql;


create or replace function is_user_client(client_id_ int) returns boolean as $$
begin
	if exists (SELECT client_id from client where client_id = client_id_) then
		return 1;
	end if;
	return 0;
end;
$$ language plpgsql;



create or replace function is_user_owner(user_id int) returns boolean as $$
begin
	if exists (SELECT owner_id from sklad_owner where owner_id = user_id) then
		return 1;
	end if;
	return 0;
end;
$$ language plpgsql;



create or replace function calculate_free_space(client_id_ integer, sklad_id_ integer) returns void as $$
declare
	item_space integer;
begin
	item_space = (select general_item_space(client_id_));
	update skladi set free_space = (skladi.free_space - item_space) where sklad_id = sklad_id_;
end;
$$ language plpgsql;



create or replace function del_client(client_id_ integer) returns void as $$
begin
	delete from client where client_id = client_id_;
end;
$$ language plpgsql;



create or replace function del_item(item_id_ integer) returns void as $$
begin
	delete from items where item_id = item_id_;
end;
$$ language plpgsql;



create or replace function del_contract(contract_id_ integer) returns void as $$
begin
	delete from contracts where contract_id = ontract_id_;
end;
$$ language plpgsql;



create or replace function del_owner(owner_id_ integer) returns void as $$
begin
	delete from sklad_owner where owner_id = owner_id_;
end;
$$ language plpgsql;



create or replace function add_new_skladi_client(client_id_ integer, sklad_id_ integer) returns void as $$
begin
	INSERT INTO skladi_client VALUES ( sklad_id_, client_id_ );
end;
$$ language plpgsql;



create or replace function truncate_sklad_owner() returns void as $$
begin
	truncate sklad_owner cascade;
end;
$$ language plpgsql;


create or replace function truncate_skladi() returns void as $$
begin
	truncate skladi cascade;
end;
$$ language plpgsql;



create or replace function truncate_contracts() returns void as $$
begin
	truncate contracts cascade;
end;
$$ language plpgsql;



create or replace function truncate_client() returns void as $$
begin
	truncate client cascade;
end;
$$ language plpgsql;



create or replace function truncate_items() returns void as $$
begin
	truncate items cascade;
end;
$$ language plpgsql;



create or replace function truncate_items() returns void as $$
begin
	truncate items cascade;
end;
$$ language plpgsql;



create or replace function truncate_skladi_client() returns void as $$
begin
	truncate skladi_client cascade;
end;
$$ language plpgsql;