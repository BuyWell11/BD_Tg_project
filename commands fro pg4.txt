create or replace function add_new_user(user_id_ integer, is_admin_ boolean) returns boolean as $$
begin
	if not exists (SELECT user_id from all_users where user_id = user_id_) then
		INSERT INTO all_users VALUES ( user_id_, is_admin_ );
		return 1;
	end if;
	return 0;
end;
$$ language plpgsql;



create or replace function is_user_admin(user_id_ integer) returns boolean as $$
begin
	return is_admin from all_users where user_id = user_id_;
end;
$$ language plpgsql;



create or replace function add_new_client(client_id_ integer, client_name_ char, client_email_ char) returns boolean as $$
begin
	if not exists (SELECT client_id from client where client_id = client_id_) then
		INSERT INTO client VALUES ( client_id_, client_name_, client_email_ );
		return 1;
	end if;
	return 0;
end;
$$ language plpgsql;



create or replace function add_new_item(item_id_ integer, item_name_ char, item_space_ integer, owner_ integer) returns boolean as $$
begin
	if not exists (SELECT * from items where item_id = item_id_) then
		INSERT INTO items VALUES ( item_id_, item_name_, item_space_, owner_ );
		return 1;
	end if;
	return 0;
end;
$$ language plpgsql;



create or replace function add_new_sklad(sklad_id_ integer, owner_id_ integer, free_space_ integer, total_space_ integer, price_for_one_month integer) returns boolean as $$
begin
	if not exists (SELECT * from skladi where sklad_id = sklad_id_) then
		INSERT INTO skladi VALUES ( sklad_id_, owner_id_, free_space_, total_space_, price_for_one_month );
		return 1;
	end if;
	return 0;
end;
$$ language plpgsql;



create or replace function add_new_owner(owner_id_ integer, owner_name_ char, owner_email_ char) returns boolean as $$
begin
	if not exists (SELECT * from sklad_owner where owner_id = owner_id_) then
		INSERT INTO sklad_owner VALUES ( owner_id_, owner_name_, owner_email_ );
		return 1;
	end if;
	return 0;
end;
$$ language plpgsql;



create or replace function add_new_contract(contract_id_ integer, sklad_id_ integer, client_id_ integer, rent_duration_ integer) returns boolean as $$
begin
	if not exists (SELECT * from contracts where contract_id = contract_id_) then
		INSERT INTO contracts VALUES ( contract_id_, sklad_id_, client_id_, rent_duration_ );
		return 1;
	end if;
	return 0;
end;
$$ language plpgsql;



create or replace function general_item_space(client_id_ integer) returns integer as $$
begin
	return SUM(item_space) FROM items WHERE owner = client_id_;
end;
$$ language plpgsql;



create or replace function available_sklads(item_space_sum integer) 
returns setof skladi as $$
begin
	return query select * FROM skladi WHERE skladi.free_space >= item_space_sum;
end;
$$ language plpgsql;



create or replace function info_about_items(client_id_ integer) 
returns setof items as $$
begin
	return query SELECT * FROM items WHERE owner = client_id_;
end;
$$ language plpgsql;



create or replace function info_about_owner_sklads(owner_id_ integer) 
returns setof skladi as $$
begin
	return query SELECT * FROM skladi WHERE owner_id = owner_id_;
end;
$$ language plpgsql;



create or replace function info_about_owner_sklads(owner_id_ integer) 
returns setof skladi as $$
begin
	return query SELECT * FROM skladi WHERE owner_id = owner_id_;
end;
$$ language plpgsql;



create or replace function info_about_client_contracts(client_id_ integer) 
returns setof contracts as $$
begin
	return query SELECT * FROM contracts WHERE client_id = client_id_;
end;
$$ language plpgsql;



create or replace function info_about_owner_contracts(owner_id_ integer)
returns setof contracts as $$
begin
	return query SELECT contract_id, contracts.sklad_id, client_id, rent_duration, total_price
	FROM contracts, skladi WHERE contracts.sklad_id = skladi.sklad_id AND owner_id = owner_id_;
end;
$$ language plpgsql;



create or replace function del_sklad(sklad_id_ integer)
returns boolean as $$
begin
	delete from skladi where sklad_id = sklad_id_;
	return true;
end;
$$ language plpgsql;



drop table price;


